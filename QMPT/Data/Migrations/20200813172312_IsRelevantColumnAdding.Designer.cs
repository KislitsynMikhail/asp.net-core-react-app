// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QMPT.Data;
using QMPT.Data.Models;

namespace QMPT.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200813172312_IsRelevantColumnAdding")]
    partial class IsRelevantColumnAdding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:price_type", "repair,delivery")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("QMPT.Data.Models.Devices.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RemoverId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("QMPT.Data.Models.Devices.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdmissibleRandomErrorsMaxJson")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<string>("GradientResistence")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("MagnetometerReadingsVariation")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MeasurementRange")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OptimalCycle")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<string>("PermissibleSystematicErrorMax")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RelaxtionTime")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<string>("SignalAmplitude")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("QMPT.Data.Models.KeyValuePair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("KeyValuePairs");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.ContactPersons.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.ContactPersons.ContactPersonEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContactPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("ContactPersonEmails");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.ContactPersons.ContactPersonPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContactPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("ContactPersonPhoneNumbers");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BIK")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Base")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ChiefAccountant")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CorporateAccount")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("INN")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUSN")
                        .HasColumnType("boolean");

                    b.Property<string>("KPP")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("LegalAddress")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ManagerPosition")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("OGRN")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("OKPO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<string>("SettlementAccount")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SupervisorFIO")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("Organizations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Organization");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.OrganizationFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("OrganizationFiles");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.OrganizationNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("OrganizationNotes");
                });

            modelBuilder.Entity("QMPT.Data.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("OriginalId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.Property<Price.PriceType>("Type")
                        .HasColumnType("price_type");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("RemoverId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("QMPT.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("QMPT.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("RemovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemoverId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RemoverId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.Customer", b =>
                {
                    b.HasBaseType("QMPT.Data.Models.Organizations.Organization");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.Provider", b =>
                {
                    b.HasBaseType("QMPT.Data.Models.Organizations.Organization");

                    b.HasDiscriminator().HasValue("Provider");
                });

            modelBuilder.Entity("QMPT.Data.Models.Devices.Accessory", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedAccessories")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Devices.Device", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedDevices")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedDevices")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Devices.Device", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedDevices")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.ContactPersons.ContactPerson", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedContactPeople")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedContactPeople")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Organizations.Organization", "Organization")
                        .WithMany("ContactPeople")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.Organizations.ContactPersons.ContactPerson", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedContactPeople")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.ContactPersons.ContactPersonEmail", b =>
                {
                    b.HasOne("QMPT.Data.Models.Organizations.ContactPersons.ContactPerson", "ContactPerson")
                        .WithMany("Emails")
                        .HasForeignKey("ContactPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedContactPersonEmails")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedContactPersonEmails")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Organizations.ContactPersons.ContactPersonEmail", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedContactPersonEmails")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.ContactPersons.ContactPersonPhoneNumber", b =>
                {
                    b.HasOne("QMPT.Data.Models.Organizations.ContactPersons.ContactPerson", "ContactPerson")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedContactPersonPhoneNumbers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedContactPersonPhoneNumbers")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Organizations.ContactPersons.ContactPersonPhoneNumber", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedContactPersonPhoneNumbers")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.Organization", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedOrganizations")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Organizations.Organization", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedOrganizations")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.OrganizationFile", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedOrganizationFiles")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedOrganizationFiles")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Organizations.Organization", "Organization")
                        .WithMany("Files")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.Organizations.OrganizationFile", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedOrganizationFiles")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Organizations.OrganizationNote", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedOrganizationNotes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedOrganizationNotes")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Organizations.Organization", "Organization")
                        .WithMany("Notes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.Organizations.OrganizationNote", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedOrganizationNotes")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.Price", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Creator")
                        .WithMany("CreatedPrices")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QMPT.Data.Models.User", "Editor")
                        .WithMany("EditedPrices")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QMPT.Data.Models.Price", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedPrices")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QMPT.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QMPT.Data.Models.User", b =>
                {
                    b.HasOne("QMPT.Data.Models.User", "Remover")
                        .WithMany("RemovedUsers")
                        .HasForeignKey("RemoverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
